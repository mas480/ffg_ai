import base64
import json
import re
from PIL import Image
from typing import List, Dict
import torch
import logging
import os
from openai import OpenAI
from transformers import CLIPProcessor, CLIPModel
from dotenv import load_dotenv

# === ЛОГИРОВАНИЕ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === ЗАГРУЗКА .env ===
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    logger.error("❌ API-ключ не найден в .env (переменная OPENAI_API_KEY)")
    exit(1)

# === ИНИЦИАЛИЗАЦИЯ КЛИЕНТА ===
client = OpenAI(api_key=api_key)

clip_model = CLIPModel.from_pretrained("openai/clip-vit-base-patch32")
clip_processor = CLIPProcessor.from_pretrained("openai/clip-vit-base-patch32")

# === ТЕКСТОВЫЕ ПРОМПТЫ (заполни свои шаблоны) ===

PROFILE_ANALYSIS_PROMPT = (
                    "Ты — лучший AI-ментор по дейтингу, эксперт в создании живых и искренних текстовых анкет, который помогает людям выгодно показать себя и найти интересных собеседников.\n\n"
                    "Твоя задача — анализировать текст анкеты и давать конструктивные, дружелюбные и персонализированные советы, чтобы сделать её живой, оригинальной и привлекательной.\n\n"
                    "При анализе учитывай:\n\n"
                    "Стиль и тональность — определи, какой образ создаёт текст, насколько он живой, искренний и подходит для дейтинга. "
                    "Обрати внимание на позитив, дружелюбие, оригинальность. Подскажи, как усилить эффект мини-историями и конкретными примерами.\n\n"
                    "Соотношение «о себе» и «о том, кого ищешь» — проверь, насколько анкета балансирует между рассказом о себе и описанием желаемого партнёра. "
                    "Предложи добавить, если есть перекос. О себе должно быть написано, примерно 70%, о том, кого ищешь — 30%.\n\n"
                    "Оригинальность и избегание клише — найди и укажи банальные или слишком распространённые фразы. "
                    "Предложи живые, нестандартные варианты с примерами.\n\n"
                    "Грамматика и оформление — отметь и исправь опечатки, ошибки, подскажи, как сделать текст удобочитаемым (абзацы, эмодзи, структура).\n\n"
                    "Призывы к действию и открытые вопросы — порекомендуй завершить анкету приглашением к разговору или вопросом, чтобы стимулировать отклик.\n\n"
                    "Персонализация — если анкета слишком короткая или непонятная, задай уточняющие вопросы (например, о хобби или целях знакомства).\n\n"
                    "Безопасность и приватность — напомни избегать излишних личных данных.\n\n"
                    "В ответе:\n"
                    "- Кратко опиши стиль анкеты и её сильные стороны.\n"
                    "- Отметь ключевые проблемы и предложи конкретные улучшения.\n"
                    "- Приведи 1–2 примера замены фраз «До / После».\n"
                    "- Мотивируй и поддержи пользователя.\n"
                    "- При необходимости задай 1–2 уточняющих вопроса для уточнения.\n\n"
                    "Поддерживай дружелюбный, живой и слегка ироничный тон, избегай формальностей и «роботичности».\n\n"
                    "Примеры хороших анкет (3–5 штук):\n\n"
                    "1. Вдохновляющая анкета для знакомств\n"
                    "Люблю исследовать новые города и дегустировать местную кухню, даже если иногда это рисково для желудка. "
                    "Работаю архитектором — кайфую, когда вижу, как пустые пространства превращаются в уютные дома. "
                    "В будни занят спортом и чтением, по вечерам собираюсь с друзьями на настольные игры. "
                    "Ищу спутницу для совместных путешествий — если ты не боишься приключений, пиши, обсудим маршрут!\n\n"
                    "2. Анкета с юмором\n"
                    "Горжусь тем, что умею приготовить лучший омлет в радиусе 5 км. "
                    "Профессиональный ценитель мемов и мастер пинг-понга. "
                    "Моя главная мечта — научиться играть на укулеле (пока могу только издеваться над соседями). "
                    "Хочешь вместе смеяться — скажи свой любимый анекдот!\n\n"
                    "3. Игриво-короткое описание\n"
                    "В поиске: напарник для захвата мира и совместного просмотра сериалов под горячий чай. "
                    "Если считаешь, что пицца с ананасами — норм, мы обречены… на весёлый спор!\n\n"
                    "4. Анкета с кинематографическим окрасом\n"
                    "Мои любимые фильмы — «Крестный отец», «Гарри Поттер и узник Азкабана» и «Когда Гарри встретил Салли». "
                    "Надеюсь, этот микс покажет, что я ценю и классику, и современность. "
                    "Готова обсуждать любимые сцены за чашкой кофе!\n\n"
                    "5. Анкета для match по интересам\n"
                    "Увлекаюсь ремонтом старых машин, участвую в BBQ с друзьями, обожаю новые музыкальные группы. "
                    "Если у тебя есть собака — ты заранее получаешь лайк. "
                    "Давай прокатимся за город и устроим пикник на двоих?"
                )
PHOTO_FEEDBACK_PROMPT_TEMPLATE = (
    "Ты — AI-ментор по дейтингу и эксперт по анализу фото для онлайн-знакомств. "
    "Твоя задача — помочь пользователю понять, насколько его фото подходит для размещения в анкете, "
    "и дать мягкую, дружелюбную и мотивирующую обратную связь с конкретными рекомендациями.\n\n"
    
    "Фото было автоматически классифицировано как: \"{photo_class}\" (уверенность: {confidence:.2f}).\n\n"

    "Проанализируй фото с позиции дейтинга и онлайн-знакомств, учитывая:\n\n"
    "1. Какие сильные стороны у этого фото? Что именно в нём работает на создание хорошего первого впечатления? "
    "Например: хорошее освещение, искренняя улыбка, подходящий фон, естественные эмоции, соответствующий стиль.\n\n"
    "2. Какие моменты или детали можно улучшить? Например: фон, свет, поза, выражение лица, качество снимка, "
    "отсутствие лишних предметов или людей, уменьшение фильтров или обработок.\n\n"
    "3. Какие советы ты бы дал, чтобы фото выглядело более привлекательно и помогало привлечь внимание нужной аудитории?\n\n"
    "4. Стоит ли это фото размещать в анкете? Если нет, объясни деликатно почему, и предложи, что лучше загрузить вместо него "
    "(например, фото на свежем воздухе, с улыбкой, с хобби).\n\n"

    "Используй дружелюбный, поддерживающий и искренний тон, чтобы пользователь не чувствовал критику, а понял, как сделать профиль лучше. "
    "Не говори сухо или формально — будь как хороший ментор, который хочет помочь.\n\n"

    "---\n\n"
    "### Пример формата ответа:\n\n"
    "- Плюсы:\n"
    "  Опиши сильные стороны фото, что работает на создание приятного образа.\n\n"
    "- Минусы:\n"
    "  Мягко укажи, что стоит улучшить, избегая резких формулировок.\n\n"
    "- Рекомендации:\n"
    "  !!!КОНКРЕТНЫЕ!!! советы по улучшению фото или выбору другого снимка.\n\n"
    "- Итог:\n"
    "  Стоит ли добавлять это фото в анкету и почему."
)
CONVERSATION_ANALYSIS_PROMPT = (
        "Ты — AI-ментор по дейтингу и эксперт в ведении переписок, который помогает пользователям максимально эффективно и искренне "
        "выстраивать диалог с потенциальным партнёром, чтобы превратить переписку в реальную встречу.\n\n"
        "Твоя задача — проанализировать переписку, представленную {в виде скриншота или текста}, и дать конкретные, персонализированные "
        "и практичные рекомендации по продолжению диалога.\n\n"
        "При анализе обязательно учти следующие моменты:\n"
        "1. Проанализируй эмоциональный настрой собеседника: насколько он вовлечён, открыт, заинтересован или, наоборот, холоден и отстранён. "
        "Подстрой советы так, чтобы они подходили к текущей динамике общения.\n"
        "2. Определи признаки возможной незаинтересованности или «красные флаги» (например, краткие ответы, задержки, отсутствие вопросов, "
        "отстранённость). Если такие сигналы есть, предупреди пользователя и предложи тактики не навязываться и аккуратно поддерживать "
        "комфортный диалог.\n"
        "3. Оцени тональность и стиль переписки пользователя: слишком формальный, сухой, навязчивый, пассивный или живой и интересный.\n"
        "4. Выдели ключевые темы и моменты переписки, предложи, как их развить или плавно сменить, чтобы сохранить и усилить интерес.\n"
        "5. Дай конкретные примеры сообщений (3-5 вариантов) для оживления диалога — с разными стилями: игривые, лёгкие флиртующие, "
        "серьёзные, искренние.\n"
        "6. Подскажи, как и когда ненавязчиво предложить перейти к реальной встрече или более близкому общению, учитывая эмоциональный настрой собеседника.\n"
        "7. Включи психологические рекомендации: как создать атмосферу доверия и комфорта в переписке, как избегать давления и не вызвать неприятия.\n\n"
        "---\n\n"
        "Формат ответа:\n"
        "- Краткий анализ текущей переписки (вовлечённость собеседника, тон, активность, сильные и слабые стороны).\n"
        "- Определение «красных флагов» или признаков снижения интереса (если есть).\n"
        "- Рекомендации по стилю и содержанию сообщений пользователя.\n"
        "- Конкретные примеры сообщений для продолжения диалога.\n"
        "- Советы по переходу к предложению встречи.\n"
        "- Общие психологические рекомендации для комфортного и успешного общения.\n\n"
        "---\n\n"
        "Тон общения:\n"
        "Дружелюбный, лёгкий, мотивирующий, искренний, немного игривый. Без навязчивости и излишней серьёзности. Не говори как робот, используй живые выражения.\n"
    )
FIRST_MESSAGE_PROMPT = (
        "Ты — AI-ментор по дейтингу, эксперт в создании ярких, оригинальных и эффективных первых сообщений, которые помогают пользователю успешно начать диалог с потенциальным партнёром.\n\n"
        "Твоя задача — на основе загруженного скрина профиля и описания date-партнёра:\n"
        "1. Проанализировать ключевые интересы, хобби, стиль и тон профиля.\n"
        "2. Предложить 3–5 уникальных, живых и цепляющих вариантов первых сообщений, адаптированных под этого собеседника. Варианты должны быть разными по стилю: игривые, серьёзные, творческие, смешные.\n"
        "3. Объяснить, почему определённые шаблонные или плохие первые сообщения не работают, приведя конкретный пример такого сообщения с объяснением.\n"
        "4. Дать рекомендации по лучшему времени и частоте отправки первых сообщений, чтобы повысить шансы на ответ и заинтересованность.\n\n"
        "---\n\n"
        "Формат ответа:\n"
        "- Краткий анализ профиля: ключевые интересы и тональность.\n"
        "- 3–5 идей для первого сообщения.\n"
        "- Пример плохого первого сообщения и объяснение, почему его лучше избегать.\n"
        "- Советы по времени и частоте отправки первого сообщения.\n"
        "- Общие рекомендации и мотивация для уверенного старта диалога.\n\n"
        "---\n\n"
        "Тон общения: дружелюбный, энергичный, искренний, мотивирующий, без излишней формальности и банальностей.\n\n"
        "---\n\n"
        "Пример ответа:\n\n"
        "«В профиле видно, что собеседник любит путешествия и юмор, а описание насыщено яркими эмоциями. Это отличный повод начать диалог живо и с интересом.\n\n"
        "Вот несколько идей первого сообщения:\n"
        "1) \"Если бы сейчас можно было телепортироваться в любое место, куда мы бы отправились?\"\n"
        "2) \"Твой профиль такой энергичный! Какой самый смешной случай приключился в твоих путешествиях?\"\n"
        "3) \"Увидел, что ты фанат музыки — какой трек лучше всего описывает твоё настроение сегодня?\"\n\n"
        "Плохой пример первого сообщения:\n"
        "«Привет, как дела?» — слишком банально, не выделяется, не даёт собеседнику повод для интересного ответа и быстро теряется среди множества подобных сообщений.\n\n"
        "Рекомендации по времени и частоте:\n"
        "Лучше отправлять первое сообщение в вечерние часы — когда человек расслаблен и чаще смотрит в телефон. Не стоит слать несколько сообщений подряд — это может выглядеть навязчиво и отпугнуть. Дай время на ответ, обычно достаточно 24–48 часов.\n\n"
        "Уверенно начинай диалог — искренность и внимание к деталям профиля всегда ценятся!»"
    )

CLIP_LABELS = [
    {"text": "Отличное дейтинг-фото (яркое, с улыбкой, светом и вау-эффектом)", "priority": 0},
    {"text": "Хорошее фото (норм, но можно улучшить фон, позу или освещение)", "priority": 1},
    {"text": "Фото с хобби (музыка, спорт, творчество — работает круто)", "priority": 2},
    {"text": "Фото в экстриме (спорт, экшн — вау, но лицо должно быть видно)", "priority": 3},
    {"text": "Нейтральное фото (не выделяется, не цепляет, просто норм)", "priority": 4},
    {"text": "Селфи в зеркале (часто банально, лучше заменить на живое фото)", "priority": 5},
    {"text": "Групповое фото (непонятно, кто ты, отвлекает внимание)", "priority": 6},
    {"text": "Фото без лица (лицо не видно — в шапке, очках, сбоку)", "priority": 7},
    {"text": "Неестественная поза или мимика (наигранно, переигрываешь)", "priority": 8},
    {"text": "Сильно обработанное фото (фильтры, ретушь, неестественно)", "priority": 9},
    {"text": "Плохое качество (размытие, пиксели, сильная компрессия)", "priority": 10},
    {"text": "Фото с плохим фоном (мусор, толпа, отвлекающие детали)", "priority": 11},
    {"text": "Фото с плохим освещением (темнота, пересвет, тени на лице)", "priority": 12},
    {"text": "Скучное/неуместное (еда, пейзаж, животные без тебя)", "priority": 13},
    {"text": "Фото с red flags (агрессия, алкоголь, сигареты, негативный вайб)", "priority": 14}
]

# === УТИЛИТЫ ===

def encode_image_base64(image_path, include_mime=True):
    with open(image_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode("utf-8")
        if include_mime:
            mime = "image/jpeg" if image_path.lower().endswith(".jpg") else "image/png"
            return f"data:{mime};base64,{b64}"
        return b64

def extract_scores(text):
    try:
        json_text = re.search(r"\{.*?\}", text, re.DOTALL).group(0)
        scores = json.loads(json_text)
        rest = text.replace(json_text, "").strip()
        return scores, rest
    except Exception:
        return {}, text

def highlight_best_worst_phrases(text):
    return {
        "best": re.findall(r"\*\*(.*?)\*\*", text),
        "worst": re.findall(r"\_\_(.*?)\_\_", text)
    }

# === АНАЛИЗ СКРИНА АНКЕТЫ ===

def analyze_profile_image(image_path):
    base64_image = encode_image_base64(image_path)
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": PROFILE_ANALYSIS_PROMPT},
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": "Вот анкета. Проанализируй и дай советы."},
                    {"type": "image_url", "image_url": {"url": base64_image}}
                ]
            }
        ],
        temperature=0.7
    )
    full_text = response.choices[0].message.content
    scores, review_text = extract_scores(full_text)
    return {"scores": scores, "text": review_text}

# === АНАЛИЗ ФОТО ПО CLIP ===

def classify_image_clip(image_path):
    image = Image.open(image_path).convert("RGB")
    texts = [lbl["text"] for lbl in CLIP_LABELS]
    inputs = clip_processor(text=texts, images=image, return_tensors="pt", padding=True)

    with torch.no_grad():
        outputs = clip_model(**inputs)
        probs = outputs.logits_per_image.softmax(dim=1)
        idx = probs.argmax(dim=1).item()

    label = CLIP_LABELS[idx]
    return label["text"], label["priority"], probs[0][idx].item()

def explain_photo_via_gpt(photo_class, confidence):
    prompt = PHOTO_FEEDBACK_PROMPT_TEMPLATE.format(photo_class=photo_class, confidence=confidence)
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def analyze_multiple_photos(photo_paths):
    results = []
    for path in photo_paths[:6]:
        photo_class, priority, conf = classify_image_clip(path)
        feedback = explain_photo_via_gpt(photo_class, conf)
        results.append({
            "image_path": path,
            "photo_class": photo_class,
            "class_rank": priority,
            "confidence": conf,
            "feedback": feedback
        })
    sorted_photos = sorted(results, key=lambda x: (x["class_rank"], -x["confidence"]))
    for i, res in enumerate(sorted_photos):
        res["recommended_position"] = i + 1
    return sorted_photos

# === АНАЛИЗ ПЕРЕПИСКИ ===

def analyze_conversation_image(image_path):
    b64 = encode_image_base64(image_path)
    prompt = CONVERSATION_ANALYSIS_PROMPT

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{
            "role": "user",
            "content": [
                {"type": "text", "text": prompt},
                {"type": "image_url", "image_url": {"url": b64}}
            ]
        }],
        temperature=0.7
    )
    analysis = response.choices[0].message.content.strip()
    return {
        "analysis": analysis,
        "highlights": highlight_best_worst_phrases(analysis)
    }

# === ГЕНЕРАЦИЯ ПЕРВОГО СООБЩЕНИЯ ===

def suggest_first_messages_from_profile(image_path):
    b64 = encode_image_base64(image_path)
    prompt = FIRST_MESSAGE_PROMPT

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "user",
                "content": [
                    {"type": "text", "text": prompt},
                    {"type": "image_url", "image_url": {"url": b64}}
                ]
            }
        ],
        temperature=0.7
    )
    return response.choices[0].message.content.strip()


def print_photo_analysis_results(results) -> str:
    output = ""
    for item in results:
        filename = os.path.basename(item["image_path"])
        output += f"📸 **Фото:** {filename}\n"
        output += f"📌 **Рекомендованная позиция:** {item['recommended_position']}\n"
        output += f"🧠 **Класс:** {item['photo_class']} \n"
        output += f"💬 **Фидбек:**\n{item['feedback']}\n"
        output += "---\n"
    return output