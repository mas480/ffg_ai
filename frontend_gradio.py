import gradio as gr
import base64
import os
import shutil
import json
import unicodedata
import requests

from analyzer import (
    analyze_profile_image,
    analyze_multiple_photos,
    analyze_conversation_image,
    suggest_first_messages_from_profile,
    print_photo_analysis_results  # –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç
)

UPLOAD_DIR = "/tmp/user_uploads"
API_URL = "http://localhost:8000"

def clean_text(text):
    if isinstance(text, str):
        text = text.encode('utf-8', 'replace').decode('utf-8', 'ignore')
        text = ''.join(ch for ch in text if not unicodedata.category(ch).startswith('Cs'))
    return text


def save_uploaded_files_locally(user_name, section, files):
    if not files:
        return []

    # –û–±–µ—Ä–Ω—ë–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
    if isinstance(files, str):
        files = [files]

    folder = os.path.join(UPLOAD_DIR, section, user_name)
    if os.path.exists(folder):
        shutil.rmtree(folder)
    os.makedirs(folder, exist_ok=True)

    saved_paths = []
    for i, f in enumerate(files):
        ext = os.path.splitext(f)[1]
        target_path = os.path.join(folder, f"{section}{i}{ext}")
        shutil.copy(f, target_path)
        saved_paths.append(target_path)
    return saved_paths


def run_my_analysis(description_files):
    if not description_files:
        return "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∞–Ω–∫–µ—Ç—ã.", "", gr.update(visible=False), gr.update(visible=False)
    
    file = description_files[0]
    with open(file.name, "rb") as f:
        files = {"file": (file.name, f)}
        resp = requests.post(f"{API_URL}/analyze_profile_image", files=files)

    if resp.ok:
        data = resp.json()
        return clean_text(data["text"]), "–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ", gr.update(visible=True), gr.update(visible=True)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.", "", gr.update(visible=False), gr.update(visible=False)

def run_partner_analysis(photo_files):
    if not photo_files:
        return "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è.", gr.update(visible=False)
    
    files = [("files", (f.name, open(f.name, "rb"))) for f in photo_files]
    resp = requests.post(f"{API_URL}/analyze_multiple_photos", files=files)

    if resp.ok:
        results = resp.json()
        output = ""
        for item in results:
            output += f"üì∏ **–§–æ—Ç–æ:** {os.path.basename(item['image_path'])}\n"
            output += f"üìå **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:** {item['recommended_position']}\n"
            output += f"üß† **–ö–ª–∞—Å—Å:** {item['photo_class']} \n"
            output += f"üí¨ **–§–∏–¥–±–µ–∫:**\n{item['feedback']}\n---\n"
        return output, gr.update(visible=True)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.", gr.update(visible=False)

def run_dialog_analysis(dialog_files):
    if not dialog_files:
        return "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏.", gr.update(visible=False)

    file = dialog_files[0]
    with open(file.name, "rb") as f:
        files = {"file": (file.name, f)}
        resp = requests.post(f"{API_URL}/analyze_conversation_image", files=files)

    if resp.ok:
        return clean_text(resp.json()["analysis"]), gr.update(visible=True)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.", gr.update(visible=False)

def run_compat_analysis(photo_files):
    if not photo_files:
        return "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", gr.update(visible=False)

    file = photo_files[0]
    with open(file.name, "rb") as f:
        files = {"file": (file.name, f)}
        resp = requests.post(f"{API_URL}/suggest_first_messages", files=files)

    if resp.ok:
        return clean_text(resp.json()["messages"]), gr.update(visible=True)
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞.", gr.update(visible=False)


with gr.Blocks(css="""
    body {
        background-color: #fff5f8;
        font-family: 'Nunito', sans-serif;
    }
    .gr-button:not(.save-btn) {
        width: 100%;
        background-color: #ffe4ec;
        color: #333;
        border-radius: 12px;
        font-size: 16px;
        padding: 14px;
        margin-bottom: 10px;
        font-weight: bold;
        border: none;
    }
    .gr-button:not(.save-btn):hover {
        background-color: #ffc2d1;
    }
    .card {
        background-color: #ffffff;
        padding: 16px;
        border-radius: 14px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        margin-bottom: 14px;
    }
    .placeholder {
        background: #ffeef3;
        border-radius: 14px;
        padding: 16px;
        color: #555;
        font-size: 15px;
        margin-bottom: 14px;
    }
    .section-title {
        font-size: 18px;
        font-weight: 700;
        color: #6a1b9a;
        margin-bottom: 10px;
    }
    .vibe {
        display: inline-block;
        background: #ffe0f0;
        color: #6a1b9a;
        border-radius: 20px;
        padding: 6px 12px;
        font-size: 14px;
        margin: 4px 4px 0 0;
    }
    .gr-button.save-btn {
        background-color: #ff5c5c !important;
        color: white !important;
        border-radius: 8px;
        height: 42px;
        min-width: 42px;
        font-size: 18px;
        font-weight: bold;
        padding: 0 12px;
        margin-left: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .gr-button.save-btn:hover {
        background-color: #e34b4b !important;
    }
    .gr-file {
        min-height: 50px !important;
    }
""") as app:

    gr.HTML("""
    <div style="text-align: center;">
        <h1 style="color:#6a1b9a;">üíò AI FFG DAITING</h1>
        <p style="color:#666;">–ò–ò-–º–µ–Ω—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è, –ø–æ–Ω—è—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —É–ª—É—á—à–∏—Ç—å –¥–∏–∞–ª–æ–≥</p>
    </div>
    """)

    # === –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    gr.Markdown("## üíÅ‚Äç‚ôÇÔ∏è –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    my_description = gr.File(label="–û–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)", file_types=["image"], file_count="multiple")
    my_analyze_btn = gr.Button("üîç –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò")
    my_advice_photo = gr.Markdown(visible=False)
    my_advice_desc = gr.Markdown(visible=False)
    my_analyze_btn.click(
        fn=run_my_analysis,
        inputs=[my_description],
        outputs=[my_advice_photo, my_advice_desc, my_advice_photo, my_advice_desc]
    )

    gr.Markdown("## üë§ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è")
    partner_photos = gr.File(label="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", file_types=["image"], file_count="multiple")
    partner_analyze_btn = gr.Button("üîç –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
    partner_advice_md = gr.Markdown(visible=False)
    partner_analyze_btn.click(
        fn=run_partner_analysis,
        inputs=[partner_photos],
        outputs=[partner_advice_md, partner_advice_md]
    )

    gr.Markdown("## üí¨ –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞")
    dialog_files = gr.File(label="–°–∫—Ä–∏–Ω—ã –ø–µ—Ä–µ–ø–∏—Å–∫–∏", file_types=["image", "text"], file_count="multiple")
    dialog_analyze_btn = gr.Button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É")
    dialog_advice = gr.Markdown(visible=False)
    dialog_analyze_btn.click(
        fn=run_dialog_analysis,
        inputs=[dialog_files],
        outputs=[dialog_advice, dialog_advice]
    )

    gr.Markdown("## üíû –ö–∞–∫ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥")
    compat_file = gr.File(label="–§–æ—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", file_types=["image"], file_count="single")
    compat_analyze_btn = gr.Button("üîç –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ—Ä–∞–∑—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞")
    compat_result = gr.Markdown(visible=False)
    compat_analyze_btn.click(
        fn=run_compat_analysis,
        inputs=[compat_file],
        outputs=[compat_result, compat_result]
    )

    gr.HTML("<div class='placeholder'>üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑!</div>")
    gr.HTML("""
    <div class='card'><div class='section-title'>üß† –ü–æ–¥–∫–∞—Ç—ã –¥–Ω—è</div>
    <ul><li>–¢—ã —Å–ª–æ–≤–Ω–æ –±–∞–≥, –Ω–æ —è –±—ã –Ω–µ —Å—Ç–∞–ª —Ç–µ–±—è —Ñ–∏–∫—Å–∏—Ç—å.</li><li>–ï—Å–ª–∏ —Ç—ã Wi-Fi, —Ç–æ —è –Ω–∞ 5 –ì–ì—Ü –≤–ª—é–±–ª—ë–Ω.</li><li>–¢—ã –∫–∞–∫ –ø—Ä–æ–º–ø—Ç ‚Äî –∏–¥–µ–∞–ª—å–Ω–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞.</li></ul></div>
    """)
    gr.HTML("""
    <div class='card'><div class='section-title'>ü§ñ –ß—Ç–æ –ò–ò —É–º–µ–µ—Ç</div>
    <div><span class='vibe'>üî• —Å–µ–∫—Å—É–∞–ª—å–Ω–æ—Å—Ç—å</span><span class='vibe'>üòÇ —é–º–æ—Ä</span><span class='vibe'>üìö –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</span></div></div>
    """)

app.launch(server_name="0.0.0.0", server_port=7860, share=True)