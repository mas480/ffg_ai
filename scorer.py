import logging
import os
import re
import json
from dotenv import load_dotenv
from openai import OpenAI  # –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê –ö–õ–Æ–ß–ê ===
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    exit(1)

client = OpenAI(api_key=api_key)  # ‚Üê –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç

SCORING_PROMPT_TEMPLATE = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π LLM –≤ —Å—Ñ–µ—Ä–µ –æ–Ω–ª–∞–π–Ω-–∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –ò–ò, –≤—ã–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

–û—Ü–µ–Ω–∏ –µ–≥–æ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. **–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å** ‚Äî –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
2. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è** ‚Äî –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
3. **–¢–æ–Ω** ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —à–∞–±–ª–æ–Ω–æ–≤.
4. **–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞** ‚Äî –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã, —á—ë—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã.
5. **–ü–æ–ª–Ω–æ—Ç–∞** ‚Äî –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –æ—Ç–≤–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∑–∞–¥–∞—á–∏.

–í–µ—Ä–Ω–∏ JSON —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:

{{
  "scores": {{
    "usefulness": int (1-5),
    "personalization": int (1-5),
    "tone": int (1-5),
    "specificity": int (1-5),
    "completeness": int (1-5)
  }},
  "comment": "–ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞: —á—Ç–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"
}}

–¢–ï–ö–°–¢ –î–õ–Ø –û–¶–ï–ù–ö–ò:
----------------
{input_text}
----------------
"""

def score_response_with_gpt(input_text: str) -> dict:
    prompt = SCORING_PROMPT_TEMPLATE.format(input_text=input_text)
    logger.info("‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É —á–µ—Ä–µ–∑ GPT-4o...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3
        )
        content = response.choices[0].message.content
        logger.info("‚úÖ –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.")

        json_text = re.search(r"\{.*\}", content, re.DOTALL).group(0)
        return json.loads(json_text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {e}")
        return {"scores": {}, "comment": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏."}


# === –¢–ï–°–¢ ===
if __name__ == "__main__":
    test_text = """
    - –ü–ª—é—Å—ã: –û—Ç–ª–∏—á–Ω—ã–π —Å–≤–µ—Ç, –∂–∏–≤–∞—è —É–ª—ã–±–∫–∞, –æ–±—Ä–∞–∑ –ø—Ä–∏—è—Ç–Ω—ã–π. –§–æ—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –∏ —Ç—ë–ø–ª–æ–µ –æ—â—É—â–µ–Ω–∏–µ.
    - –ú–∏–Ω—É—Å—ã: –õ—ë–≥–∫–∞—è —Ç–µ–Ω—å –Ω–∞ –ª–∏—Ü–µ ‚Äî —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ç–æ.
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–¥—Ä —Å —Ö–æ–±–±–∏ –∏–ª–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ.
    - –ò—Ç–æ–≥: –§–æ—Ç–æ –≥–æ–¥–Ω–æ–µ! –û—Å—Ç–∞–≤–ª—è–π.
    """
    result = score_response_with_gpt(test_text)

    print("üéØ –û–¶–ï–ù–ö–ò:")
    for k, v in result.get("scores", {}).items():
        print(f"{k}: {v}/5")

    print("\nüìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:")
    print(result.get("comment"))